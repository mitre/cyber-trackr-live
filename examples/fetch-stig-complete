#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'json'
require 'optparse'
require_relative 'cyber_trackr_client'

# Script to fetch complete STIG data directly from API
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: fetch-stig-complete [options]"
  
  opts.on("-n", "--name NAME", "STIG name (e.g., 'Juniper_SRX_Services_Gateway_ALG')") do |n|
    options[:name] = n
  end
  
  opts.on("-v", "--version VERSION", "STIG version (e.g., '3')") do |v|
    options[:version] = v
  end
  
  opts.on("-r", "--release RELEASE", "STIG release (e.g., '3')") do |r|
    options[:release] = r
  end
  
  opts.on("-o", "--output FILE", "Output file (default: NAME_v{VERSION}r{RELEASE}_complete.json)") do |o|
    options[:output] = o
  end
  
  opts.on("-h", "--help", "Show this help message") do
    puts opts
    exit
  end
end.parse!

# Validate required options
unless options[:name] && options[:version] && options[:release]
  puts "Error: --name, --version, and --release are required"
  puts "Example: ./fetch-stig-complete -n Juniper_SRX_Services_Gateway_ALG -v 3 -r 3"
  exit 1
end

# Set default output filename
options[:output] ||= "#{options[:name]}_v#{options[:version]}r#{options[:release]}_complete.json"

# Create client instance
client = InspecXccdfMapper::CyberTrackrClient.new

puts "Fetching complete STIG: #{options[:name]} v#{options[:version]}r#{options[:release]}"
puts "This will make multiple API calls and may take a minute..."

begin
  # Fetch complete STIG with all control details
  complete_stig = client.fetch_complete_stig(options[:name], options[:version], options[:release]) do |current, total, vuln_id|
    print "\rFetching control #{current}/#{total}: #{vuln_id}    "
  end
  
  puts "\nSuccessfully fetched #{complete_stig['requirements'].size} controls"
  
  # Write to output file
  File.write(options[:output], JSON.pretty_generate(complete_stig))
  puts "Saved complete STIG to: #{options[:output]}"
  
rescue => e
  puts "\nError: #{e.message}"
  exit 1
end
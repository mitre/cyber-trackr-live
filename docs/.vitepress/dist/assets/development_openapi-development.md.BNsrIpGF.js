import{_ as i,c as a,o as e,at as n}from"./chunks/framework.BV4VMCSO.js";const c=JSON.parse('{"title":"OpenAPI Development Guide","description":"","frontmatter":{},"headers":[],"relativePath":"development/openapi-development.md","filePath":"development/openapi-development.md"}'),t={name:"development/openapi-development.md"};function l(h,s,p,r,o,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="openapi-development-guide" tabindex="-1">OpenAPI Development Guide <a class="header-anchor" href="#openapi-development-guide" aria-label="Permalink to &quot;OpenAPI Development Guide&quot;">​</a></h1><p>This guide documents the development process for creating and maintaining the cyber.trackr.live OpenAPI specification.</p><h2 id="development-approach" tabindex="-1">Development Approach <a class="header-anchor" href="#development-approach" aria-label="Permalink to &quot;Development Approach&quot;">​</a></h2><h3 id="_1-discovery-phase" tabindex="-1">1. Discovery Phase <a class="header-anchor" href="#_1-discovery-phase" aria-label="Permalink to &quot;1. Discovery Phase&quot;">​</a></h3><p>We started by exploring the API to understand its structure:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Discover API root</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sL</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Accept: application/json&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://cyber.trackr.live/api/&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Count resources</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://cyber.trackr.live/api/stig&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;keys | length&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 1032 STIGs/SRGs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Explore specific endpoints</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://cyber.trackr.live/api/stig/Juniper_SRX_Services_Gateway_ALG/3/3&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;keys&#39;</span></span></code></pre></div><h3 id="_2-schema-development" tabindex="-1">2. Schema Development <a class="header-anchor" href="#_2-schema-development" aria-label="Permalink to &quot;2. Schema Development&quot;">​</a></h3><p>We built schemas by examining actual API responses:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Example: Building RequirementDetail schema from API response</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RequirementDetail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">object</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">rule</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">severity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">requirement-title</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">check-text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fix-text</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">string</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^V-\\d{6}$&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;V-214518&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ... etc</span></span></code></pre></div><h3 id="_3-iterative-refinement" tabindex="-1">3. Iterative Refinement <a class="header-anchor" href="#_3-iterative-refinement" aria-label="Permalink to &quot;3. Iterative Refinement&quot;">​</a></h3><p>The spec was refined through multiple iterations:</p><ol><li><strong>Initial draft</strong> - Basic endpoints and schemas</li><li><strong>Add missing endpoints</strong> - SCAP, RMF list endpoints</li><li><strong>Fix OpenAPI 3.1 syntax</strong> - Nullable fields, example vs examples</li><li><strong>Document actual behavior</strong> - 500 errors for invalid parameters</li></ol><h2 id="openapi-3-1-1-specific-features" tabindex="-1">OpenAPI 3.1.1 Specific Features <a class="header-anchor" href="#openapi-3-1-1-specific-features" aria-label="Permalink to &quot;OpenAPI 3.1.1 Specific Features&quot;">​</a></h2><h3 id="nullable-fields" tabindex="-1">Nullable Fields <a class="header-anchor" href="#nullable-fields" aria-label="Permalink to &quot;Nullable Fields&quot;">​</a></h3><p>OpenAPI 3.1 uses JSON Schema 2020-12 syntax:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># WRONG - OpenAPI 3.0 style</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mitigation-statement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;string&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;null&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CORRECT - OpenAPI 3.1 style</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">mitigation-statement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  anyOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;null&quot;</span></span></code></pre></div><h3 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h3><p>For single values use <code>example</code>, for arrays use <code>example</code> (not <code>examples</code>):</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Single value</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">severity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">string</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;medium&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Array value  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">identifiers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">array</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;V-66003&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SV-80493&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CCI-000213&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h2 id="testing-philosophy" tabindex="-1">Testing Philosophy <a class="header-anchor" href="#testing-philosophy" aria-label="Permalink to &quot;Testing Philosophy&quot;">​</a></h2><h3 id="test-driven-documentation" tabindex="-1">Test-Driven Documentation <a class="header-anchor" href="#test-driven-documentation" aria-label="Permalink to &quot;Test-Driven Documentation&quot;">​</a></h3><p>We use tests to drive documentation accuracy:</p><ol><li><strong>Write test for expected behavior</strong></li><li><strong>Run against real API</strong></li><li><strong>Update spec to match reality</strong></li><li><strong>Verify with tests</strong></li></ol><p>Example discovering 500 vs 404 behavior:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Expected behavior (failed)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert_equal </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invalid V-ID should return 404&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Actual behavior (updated)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">assert_equal </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Invalid V-ID should return 500&quot;</span></span></code></pre></div><h3 id="ruby-first-testing" tabindex="-1">Ruby-First Testing <a class="header-anchor" href="#ruby-first-testing" aria-label="Permalink to &quot;Ruby-First Testing&quot;">​</a></h3><p>We chose Ruby-based testing tools over JavaScript alternatives:</p><ul><li><code>openapi3_parser</code> - Ruby gem for OpenAPI validation</li><li><code>minitest</code> - Simple, effective test framework</li><li><code>faraday</code> - Flexible HTTP client</li></ul><p>Benefits:</p><ul><li>No Node.js dependency</li><li>Consistent with InSpec project</li><li>Better integration with Ruby client</li></ul><h2 id="schema-design-patterns" tabindex="-1">Schema Design Patterns <a class="header-anchor" href="#schema-design-patterns" aria-label="Permalink to &quot;Schema Design Patterns&quot;">​</a></h2><h3 id="shared-schemas" tabindex="-1">Shared Schemas <a class="header-anchor" href="#shared-schemas" aria-label="Permalink to &quot;Shared Schemas&quot;">​</a></h3><p>Common structures are defined once and referenced:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Document listing pattern used by STIG and SCAP</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DocumentList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">object</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  additionalProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">array</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    items</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      $ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#/components/schemas/DocumentVersion&#39;</span></span></code></pre></div><h3 id="consistent-patterns" tabindex="-1">Consistent Patterns <a class="header-anchor" href="#consistent-patterns" aria-label="Permalink to &quot;Consistent Patterns&quot;">​</a></h3><p>Parameter patterns are defined consistently:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Used across all endpoints</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^V-\\d{6}$&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # V-IDs</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^CCI-\\d{6}$&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # CCI-IDs  </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^[A-Z]+-\\d+$&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # RMF controls</span></span></code></pre></div><h2 id="api-quirks-and-workarounds" tabindex="-1">API Quirks and Workarounds <a class="header-anchor" href="#api-quirks-and-workarounds" aria-label="Permalink to &quot;API Quirks and Workarounds&quot;">​</a></h2><h3 id="mixed-stig-srg-endpoint" tabindex="-1">Mixed STIG/SRG Endpoint <a class="header-anchor" href="#mixed-stig-srg-endpoint" aria-label="Permalink to &quot;Mixed STIG/SRG Endpoint&quot;">​</a></h3><p>The <code>/stig</code> endpoint returns both STIGs and SRGs. We document this clearly:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Returns complete list of Security Technical Implementation Guides (STIGs) and </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Security Requirements Guides (SRGs). **Note**: These are mixed in one endpoint.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  Use document name patterns to distinguish:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  - SRGs contain &quot;Security_Requirements_Guide&quot; or &quot;(SRG)&quot; in name</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  - STIGs are vendor/product specific</span></span></code></pre></div><h3 id="error-response-inconsistency" tabindex="-1">Error Response Inconsistency <a class="header-anchor" href="#error-response-inconsistency" aria-label="Permalink to &quot;Error Response Inconsistency&quot;">​</a></h3><p>Invalid parameters return 500 instead of 404. We document this in:</p><ol><li>Endpoint responses</li><li>Test assertions</li><li>README notes</li></ol><h2 id="validation-strategy" tabindex="-1">Validation Strategy <a class="header-anchor" href="#validation-strategy" aria-label="Permalink to &quot;Validation Strategy&quot;">​</a></h2><h3 id="three-layer-validation" tabindex="-1">Three-Layer Validation <a class="header-anchor" href="#three-layer-validation" aria-label="Permalink to &quot;Three-Layer Validation&quot;">​</a></h3><ol><li><strong>Syntax</strong> - Valid OpenAPI 3.1.1 structure</li><li><strong>Completeness</strong> - All endpoints/schemas present</li><li><strong>Accuracy</strong> - Matches real API behavior</li></ol><h3 id="continuous-validation" tabindex="-1">Continuous Validation <a class="header-anchor" href="#continuous-validation" aria-label="Permalink to &quot;Continuous Validation&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Quick check after changes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruby</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/openapi_validation_test.rb</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Full validation before commits</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./run_all_tests.sh</span></span></code></pre></div><h2 id="future-improvements" tabindex="-1">Future Improvements <a class="header-anchor" href="#future-improvements" aria-label="Permalink to &quot;Future Improvements&quot;">​</a></h2><h3 id="potential-enhancements" tabindex="-1">Potential Enhancements <a class="header-anchor" href="#potential-enhancements" aria-label="Permalink to &quot;Potential Enhancements&quot;">​</a></h3><ol><li><strong>Add more examples</strong> - Real data for each schema</li><li><strong>Expand descriptions</strong> - More detail on field meanings</li><li><strong>Add x-extensions</strong> - Custom metadata for tooling</li><li><strong>Response time documentation</strong> - Note slow endpoints</li></ol><h3 id="schema-evolution" tabindex="-1">Schema Evolution <a class="header-anchor" href="#schema-evolution" aria-label="Permalink to &quot;Schema Evolution&quot;">​</a></h3><p>As the API evolves:</p><ol><li>Monitor for new endpoints</li><li>Check for schema changes</li><li>Update parameter patterns</li><li>Test error behaviors</li></ol><h2 id="tools-and-resources" tabindex="-1">Tools and Resources <a class="header-anchor" href="#tools-and-resources" aria-label="Permalink to &quot;Tools and Resources&quot;">​</a></h2><h3 id="development-tools" tabindex="-1">Development Tools <a class="header-anchor" href="#development-tools" aria-label="Permalink to &quot;Development Tools&quot;">​</a></h3><ul><li><strong>VS Code</strong> - YAML syntax highlighting</li><li><strong>Swagger Editor</strong> - Visual validation (use carefully with 3.1)</li><li><strong>jq</strong> - JSON exploration</li><li><strong>curl</strong> - API testing</li></ul><h3 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;References&quot;">​</a></h3><ul><li><a href="https://spec.openapis.org/oas/v3.1.1" target="_blank" rel="noreferrer">OpenAPI 3.1.1 Spec</a></li><li><a href="https://json-schema.org/draft/2020-12/json-schema-core.html" target="_blank" rel="noreferrer">JSON Schema 2020-12</a></li><li><a href="https://github.com/kevindew/openapi3_parser" target="_blank" rel="noreferrer">openapi3_parser docs</a></li></ul><h2 id="lessons-learned" tabindex="-1">Lessons Learned <a class="header-anchor" href="#lessons-learned" aria-label="Permalink to &quot;Lessons Learned&quot;">​</a></h2><ol><li><strong>Test against real API early</strong> - Assumptions often wrong</li><li><strong>Document actual behavior</strong> - Even if non-ideal</li><li><strong>Use consistent patterns</strong> - Makes spec maintainable</li><li><strong>Validate continuously</strong> - Catch issues quickly</li><li><strong>Ruby tools are sufficient</strong> - No need for Node.js ecosystem</li></ol>`,62)]))}const g=i(t,[["render",l]]);export{c as __pageData,g as default};

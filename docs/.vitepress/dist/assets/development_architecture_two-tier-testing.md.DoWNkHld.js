import{_ as n,C as l,c as r,o as s,at as a,b as o,w as e,a as p,G as h,au as d}from"./chunks/framework.BV4VMCSO.js";const A=JSON.parse('{"title":"Two-Tier Testing Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"development/architecture/two-tier-testing.md","filePath":"development/architecture/two-tier-testing.md"}'),k={name:"development/architecture/two-tier-testing.md"};function c(g,i,u,E,y,m){const t=l("Mermaid");return s(),r("div",null,[i[1]||(i[1]=a('<h1 id="two-tier-testing-architecture" tabindex="-1">Two-Tier Testing Architecture <a class="header-anchor" href="#two-tier-testing-architecture" aria-label="Permalink to &quot;Two-Tier Testing Architecture&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The cyber.trackr.live project implements a clean separation between OpenAPI specification validation and live API testing through a two-tier architecture.</p><h2 id="architecture-design" tabindex="-1">Architecture Design <a class="header-anchor" href="#architecture-design" aria-label="Permalink to &quot;Architecture Design&quot;">​</a></h2>',4)),(s(),o(d,null,{default:e(()=>[h(t,{id:"mermaid-12",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5BOpenAPI%20Specification%3Cbr%2F%3Eopenapi%2Fopenapi.yaml%5D%20--%3E%20B%5BTier%201%3A%20Static%20Validation%5D%0A%20%20%20%20A%20--%3E%20C%5BTier%202%3A%20Live%20API%20Testing%5D%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%20D%5BSpectral%20Linter%3Cbr%2F%3ENode.js%5D%0A%20%20%20%20B%20--%3E%20E%5BSyntax%20Validation%3Cbr%2F%3E%3C%201%20second%5D%0A%20%20%20%20B%20--%3E%20F%5BStandards%20Compliance%3Cbr%2F%3EOpenAPI%203.1.1%5D%0A%20%20%20%20%0A%20%20%20%20C%20--%3E%20G%5BGenerated%20Ruby%20Client%3Cbr%2F%3EFaraday%20HTTP%5D%0A%20%20%20%20C%20--%3E%20H%5BLive%20API%20Calls%3Cbr%2F%3ENetwork%20dependent%5D%0A%20%20%20%20C%20--%3E%20I%5BBehavior%20Validation%3Cbr%2F%3EReal%20responses%5D%0A%20%20%20%20%0A%20%20%20%20D%20--%3E%20J%5B%E2%9C%85%20Spec%20Valid%5D%0A%20%20%20%20G%20--%3E%20K%5B%E2%9C%85%20API%20Works%5D%0A%20%20%20%20%0A%20%20%20%20J%20--%3E%20L%5BDeploy%20Documentation%5D%0A%20%20%20%20K%20--%3E%20L%0A%20%20%20%20%0A%20%20%20%20%25%25%20Accessible%20Colors%20(Light%2FDark%20Mode%20%2B%20Color-Blind%20Safe)%0A%20%20%20%20style%20A%20fill%3A%23007bff%2Cstroke%3A%230056b3%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20B%20fill%3A%23fd7e14%2Cstroke%3A%23e55100%2Cstroke-width%3A2px%2Ccolor%3A%23000000%0A%20%20%20%20style%20C%20fill%3A%23fd7e14%2Cstroke%3A%23e55100%2Cstroke-width%3A2px%2Ccolor%3A%23000000%0A%20%20%20%20style%20L%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A"})]),fallback:e(()=>i[0]||(i[0]=[p(" Loading... ")])),_:1})),i[2]||(i[2]=a(`<h3 id="tier-1-static-validation-node-js" tabindex="-1">Tier 1: Static Validation (Node.js) <a class="header-anchor" href="#tier-1-static-validation-node-js" aria-label="Permalink to &quot;Tier 1: Static Validation (Node.js)&quot;">​</a></h3><ul><li><strong>Tool</strong>: Spectral OpenAPI linter</li><li><strong>Purpose</strong>: Validate OpenAPI specification structure and standards</li><li><strong>Speed</strong>: Fast (&lt; 1 second)</li><li><strong>Dependencies</strong>: Node.js only</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:validate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Runs spectral lint openapi/openapi.yaml</span></span></code></pre></div><h3 id="tier-2-live-api-testing-ruby" tabindex="-1">Tier 2: Live API Testing (Ruby) <a class="header-anchor" href="#tier-2-live-api-testing-ruby" aria-label="Permalink to &quot;Tier 2: Live API Testing (Ruby)&quot;">​</a></h3><ul><li><strong>Tool</strong>: Ruby test suite with Faraday HTTP client</li><li><strong>Purpose</strong>: Validate actual API behavior and responses</li><li><strong>Speed</strong>: Moderate (depends on network)</li><li><strong>Dependencies</strong>: Ruby + live API access</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bundle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:live</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Tests against real API endpoints</span></span></code></pre></div><h2 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h2><h3 id="_1-separation-of-concerns" tabindex="-1">1. <strong>Separation of Concerns</strong> <a class="header-anchor" href="#_1-separation-of-concerns" aria-label="Permalink to &quot;1. **Separation of Concerns**&quot;">​</a></h3><ul><li>OpenAPI validation is independent of Ruby environment</li><li>API testing focuses on behavior, not specification syntax</li><li>Each tool optimized for its specific purpose</li></ul><h3 id="_2-development-workflow" tabindex="-1">2. <strong>Development Workflow</strong> <a class="header-anchor" href="#_2-development-workflow" aria-label="Permalink to &quot;2. **Development Workflow**&quot;">​</a></h3><ul><li>Quick feedback loop: Spectral catches spec issues immediately</li><li>Comprehensive testing: Ruby validates real API behavior</li><li>Platform independence: Spectral works everywhere Node.js runs</li></ul><h3 id="_3-ci-cd-efficiency" tabindex="-1">3. <strong>CI/CD Efficiency</strong> <a class="header-anchor" href="#_3-ci-cd-efficiency" aria-label="Permalink to &quot;3. **CI/CD Efficiency**&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Fast pipeline for spec changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Validate OpenAPI</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run docs:validate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Comprehensive testing for code changes  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Test live API</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bundle exec rake test</span></span></code></pre></div><h3 id="_4-tool-optimization" tabindex="-1">4. <strong>Tool Optimization</strong> <a class="header-anchor" href="#_4-tool-optimization" aria-label="Permalink to &quot;4. **Tool Optimization**&quot;">​</a></h3><ul><li><strong>Spectral</strong>: Best-in-class OpenAPI validation with custom rules</li><li><strong>Ruby</strong>: Native HTTP testing with rich assertion libraries</li><li><strong>No duplication</strong>: Each tool handles what it does best</li></ul><h2 id="implementation-example" tabindex="-1">Implementation Example <a class="header-anchor" href="#implementation-example" aria-label="Permalink to &quot;Implementation Example&quot;">​</a></h2><h3 id="spectral-configuration-spectral-yml" tabindex="-1">Spectral Configuration (<code>.spectral.yml</code>) <a class="header-anchor" href="#spectral-configuration-spectral-yml" aria-label="Permalink to &quot;Spectral Configuration (\`.spectral.yml\`)&quot;">​</a></h3><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@stoplight/spectral/rulesets/oas&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  operation-operationId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">error</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  operation-summary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">error</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  operation-tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">error</span></span></code></pre></div><h3 id="ruby-test-structure" tabindex="-1">Ruby Test Structure <a class="header-anchor" href="#ruby-test-structure" aria-label="Permalink to &quot;Ruby Test Structure&quot;">​</a></h3><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LiveApiValidationTest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Minitest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_stig_endpoint_returns_valid_data</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = api_client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Juniper_SRX_Services_Gateway_ALG&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    assert response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">success?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    assert_instance_of </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="key-insight" tabindex="-1">Key Insight <a class="header-anchor" href="#key-insight" aria-label="Permalink to &quot;Key Insight&quot;">​</a></h2><p>This pattern <strong>eliminates the chicken-and-egg problem</strong> common in OpenAPI-driven development:</p><ul><li>You need the gem to test the spec</li><li>You need a valid spec to build the gem</li></ul><p>Our solution: <strong>Validate the spec independently, then test the implementation separately.</strong></p><h2 id="broader-applicability" tabindex="-1">Broader Applicability <a class="header-anchor" href="#broader-applicability" aria-label="Permalink to &quot;Broader Applicability&quot;">​</a></h2><p>This two-tier pattern works for <strong>any OpenAPI project</strong>:</p><ol><li><strong>Stage 1</strong>: Validate specification syntax and standards</li><li><strong>Stage 2</strong>: Test implementation behavior with generated clients</li></ol><p>The pattern scales from simple APIs to complex enterprise systems while maintaining clean separation of concerns and optimal tooling for each validation layer.</p>`,28))])}const f=n(k,[["render",c]]);export{A as __pageData,f as default};

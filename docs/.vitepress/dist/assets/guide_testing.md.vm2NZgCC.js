import{_ as h,C as d,c as k,o as t,j as i,b as l,at as o,a as e,w as a,G as r,au as p}from"./chunks/framework.BV4VMCSO.js";const C=JSON.parse('{"title":"Testing Guide","description":"","frontmatter":{},"headers":[],"relativePath":"guide/testing.md","filePath":"guide/testing.md"}'),c={name:"guide/testing.md"};function g(A,s,u,f,F,y){const n=d("Mermaid");return t(),k("div",null,[s[5]||(s[5]=i("h1",{id:"testing-guide",tabindex:"-1"},[e("Testing Guide "),i("a",{class:"header-anchor",href:"#testing-guide","aria-label":'Permalink to "Testing Guide"'},"​")],-1)),s[6]||(s[6]=i("h2",{id:"two-tier-testing-architecture",tabindex:"-1"},[e("Two-Tier Testing Architecture "),i("a",{class:"header-anchor",href:"#two-tier-testing-architecture","aria-label":'Permalink to "Two-Tier Testing Architecture"'},"​")],-1)),s[7]||(s[7]=i("p",null,[e("Our testing approach "),i("strong",null,"eliminates the chicken-and-egg problem"),e(" in OpenAPI development by separating static specification validation from dynamic API behavior testing.")],-1)),(t(),l(p,null,{default:a(()=>[r(n,{id:"mermaid-9",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20A%5B%22%F0%9F%8F%97%EF%B8%8F%20OpenAPI-First%20Development%22%5D%20--%3E%20B%5B%22%E2%9A%A1%20Tier%201%3A%20Spectral%22%5D%0A%20%20%20%20A%20--%3E%20C%5B%22%F0%9F%A7%AA%20Tier%202%3A%20Ruby%20Testing%22%5D%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%20D%5B%22%F0%9F%93%8B%20Specification%20Quality%22%5D%0A%20%20%20%20C%20--%3E%20E%5B%22%F0%9F%94%A7%20API%20Behavior%20Verification%22%5D%0A%20%20%20%20%0A%20%20%20%20D%20--%3E%20F%5B%22%E2%9C%85%20Deploy%20Documentation%22%5D%0A%20%20%20%20E%20--%3E%20F%0A%20%20%20%20F%20--%3E%20G%5B%22%F0%9F%9A%80%20Production-Ready%20System%22%5D%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23007bff%2Cstroke%3A%230056b3%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20B%20fill%3A%23fd7e14%2Cstroke%3A%23e55100%2Cstroke-width%3A2px%2Ccolor%3A%23000000%0A%20%20%20%20style%20C%20fill%3A%23fd7e14%2Cstroke%3A%23e55100%2Cstroke-width%3A2px%2Ccolor%3A%23000000%0A%20%20%20%20style%20F%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20G%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A"})]),fallback:a(()=>s[0]||(s[0]=[e(" Loading... ")])),_:1})),s[8]||(s[8]=i("h3",{id:"why-two-tier-testing-matters",tabindex:"-1"},[e("Why Two-Tier Testing Matters "),i("a",{class:"header-anchor",href:"#why-two-tier-testing-matters","aria-label":'Permalink to "Why Two-Tier Testing Matters"'},"​")],-1)),(t(),l(p,null,{default:a(()=>[r(n,{id:"mermaid-13",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A%5B%22%E2%9D%8C%20Traditional%20Approach%22%5D%20--%3E%20B%5B%22%F0%9F%93%9D%20Write%20Code%20First%22%5D%0A%20%20%20%20B%20--%3E%20C%5B%22%F0%9F%93%8B%20Generate%20Spec%22%5D%0A%20%20%20%20C%20--%3E%20D%5B%22%E2%9D%93%20Spec%20Accuracy%20Issues%22%5D%0A%20%20%20%20%0A%20%20%20%20E%5B%22%E2%9C%85%20Our%20Two-Tier%20Approach%22%5D%20--%3E%20F%5B%22%F0%9F%93%8B%20Validated%20Spec%20First%22%5D%0A%20%20%20%20F%20--%3E%20G%5B%22%F0%9F%A7%AA%20Test%20Independently%22%5D%20%20%0A%20%20%20%20G%20--%3E%20H%5B%22%F0%9F%9A%80%20Reliable%20System%22%5D%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23dc3545%2Cstroke%3A%23bd2130%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20D%20fill%3A%23dc3545%2Cstroke%3A%23bd2130%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20E%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20H%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A"})]),fallback:a(()=>s[1]||(s[1]=[e(" Loading... ")])),_:1})),s[9]||(s[9]=i("h2",{id:"testing-workflow",tabindex:"-1"},[e("Testing Workflow "),i("a",{class:"header-anchor",href:"#testing-workflow","aria-label":'Permalink to "Testing Workflow"'},"​")],-1)),(t(),l(p,null,{default:a(()=>[r(n,{id:"mermaid-17",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20A%5B%22%F0%9F%8E%AF%20Choose%20Testing%20Level%22%5D%20--%3E%20B%5B%22%E2%9A%A1%20Quick%20Validation%22%5D%0A%20%20%20%20A%20--%3E%20C%5B%22%F0%9F%A7%AA%20Full%20Testing%22%5D%0A%20%20%20%20A%20--%3E%20D%5B%22%F0%9F%8C%90%20Live%20API%20Only%22%5D%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%20E%5B%22npm%20run%20docs%3Avalidate%22%5D%0A%20%20%20%20C%20--%3E%20F%5B%22npm%20run%20test%3Aall%22%5D%0A%20%20%20%20D%20--%3E%20G%5B%22bundle%20exec%20rake%20test%3Alive%22%5D%0A%20%20%20%20%0A%20%20%20%20E%20--%3E%20H%5B%22%F0%9F%93%8B%20Spec%20Quality%20Verified%22%5D%0A%20%20%20%20F%20--%3E%20I%5B%22%E2%9C%85%20Production%20Ready%22%5D%0A%20%20%20%20G%20--%3E%20J%5B%22%F0%9F%94%A7%20Live%20Behavior%20Confirmed%22%5D%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23007bff%2Cstroke%3A%230056b3%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20H%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20I%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20J%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A"})]),fallback:a(()=>s[2]||(s[2]=[e(" Loading... ")])),_:1})),s[10]||(s[10]=o(`<h2 id="running-tests" tabindex="-1">Running Tests <a class="header-anchor" href="#running-tests" aria-label="Permalink to &quot;Running Tests&quot;">​</a></h2><h3 id="⚡-tier-1-openapi-validation-spectral" tabindex="-1">⚡ Tier 1: OpenAPI Validation (Spectral) <a class="header-anchor" href="#⚡-tier-1-openapi-validation-spectral" aria-label="Permalink to &quot;⚡ Tier 1: OpenAPI Validation (Spectral)&quot;">​</a></h3><p><strong>Lightning-fast validation</strong> of specification quality:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Professional-grade OpenAPI validation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:validate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Validate Mermaid diagrams in documentation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:validate-mermaid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run both validations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docs:validate-all</span></span></code></pre></div><p><strong>What Tier 1 Validates:</strong></p><ul><li>✅ OpenAPI 3.1.1 syntax compliance</li><li>✅ Security scheme definitions</li><li>✅ Response schema consistency</li><li>✅ Parameter validation rules</li><li>✅ Documentation completeness</li></ul><h3 id="🧪-tier-2-ruby-testing" tabindex="-1">🧪 Tier 2: Ruby Testing <a class="header-anchor" href="#🧪-tier-2-ruby-testing" aria-label="Permalink to &quot;🧪 Tier 2: Ruby Testing&quot;">​</a></h3><p><strong>Real API behavior validation</strong> with live integration:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Core gem functionality (fast - default)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bundle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Complete testing including live API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bundle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Live API integration tests only</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bundle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test:live</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run specific test file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bundle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruby</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/cyber_trackr_helper_test.rb</span></span></code></pre></div><p><strong>What Tier 2 Validates:</strong></p><ul><li>✅ Helper method functionality</li><li>✅ Error handling and recovery</li><li>✅ Real API response parsing</li><li>✅ Rate limiting behavior</li><li>✅ Integration patterns</li></ul><h2 id="ci-cd-pipeline-architecture" tabindex="-1">CI/CD Pipeline Architecture <a class="header-anchor" href="#ci-cd-pipeline-architecture" aria-label="Permalink to &quot;CI/CD Pipeline Architecture&quot;">​</a></h2><p>Our <strong>cross-platform CI/CD pipeline</strong> ensures reliability across all environments:</p>`,13)),(t(),l(p,null,{default:a(()=>[r(n,{id:"mermaid-101",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20A%5B%22%F0%9F%94%84%20Git%20Push%22%5D%20--%3E%20B%5B%22%F0%9F%93%8A%20GitHub%20Actions%20Matrix%22%5D%0A%20%20%20%20%0A%20%20%20%20B%20--%3E%20C%5B%22%F0%9F%90%A7%20Ubuntu%20Linux%3Cbr%2F%3ERuby%203.2%2C%203.3%2C%203.4%22%5D%0A%20%20%20%20B%20--%3E%20D%5B%22%F0%9F%AA%9F%20Windows%3Cbr%2F%3ERuby%203.2%2C%203.3%2C%203.4%22%5D%0A%20%20%20%20B%20--%3E%20E%5B%22%F0%9F%8D%8E%20macOS%3Cbr%2F%3ERuby%203.2%2C%203.3%2C%203.4%22%5D%0A%20%20%20%20%0A%20%20%20%20C%20--%3E%20F%5B%22%E2%9A%A1%20Tier%201%3A%20Spectral%22%5D%0A%20%20%20%20D%20--%3E%20F%0A%20%20%20%20E%20--%3E%20F%0A%20%20%20%20%0A%20%20%20%20C%20--%3E%20G%5B%22%F0%9F%A7%AA%20Tier%202%3A%20Ruby%20Tests%22%5D%0A%20%20%20%20D%20--%3E%20G%0A%20%20%20%20E%20--%3E%20G%0A%20%20%20%20%0A%20%20%20%20F%20--%3E%20H%5B%22%F0%9F%93%8B%20Spec%20Validation%20Results%22%5D%0A%20%20%20%20G%20--%3E%20I%5B%22%F0%9F%94%A7%20API%20Behavior%20Results%22%5D%0A%20%20%20%20%0A%20%20%20%20H%20--%3E%20J%5B%22%E2%9C%85%20All%20Platforms%20Pass%22%5D%0A%20%20%20%20I%20--%3E%20J%0A%20%20%20%20%0A%20%20%20%20J%20--%3E%20K%5B%22%F0%9F%9A%80%20Deploy%20Documentation%22%5D%0A%20%20%20%20K%20--%3E%20L%5B%22%F0%9F%93%9A%20GitHub%20Pages%22%5D%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23007bff%2Cstroke%3A%230056b3%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20J%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20L%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A"})]),fallback:a(()=>s[3]||(s[3]=[e(" Loading... ")])),_:1})),s[11]||(s[11]=i("h3",{id:"cross-platform-success",tabindex:"-1"},[e("Cross-Platform Success "),i("a",{class:"header-anchor",href:"#cross-platform-success","aria-label":'Permalink to "Cross-Platform Success"'},"​")],-1)),s[12]||(s[12]=i("p",null,[i("strong",null,"Why Our Tests Pass Everywhere:")],-1)),(t(),l(p,null,{default:a(()=>[r(n,{id:"mermaid-108",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20A%5B%22%F0%9F%94%A7%20Pure%20Ruby%20Dependencies%22%5D%20--%3E%20B%5B%22%E2%9C%85%20Windows%20Compatible%22%5D%0A%20%20%20%20A%20--%3E%20C%5B%22%E2%9C%85%20macOS%20Compatible%22%5D%0A%20%20%20%20A%20--%3E%20D%5B%22%E2%9C%85%20Linux%20Compatible%22%5D%0A%20%20%20%20%0A%20%20%20%20E%5B%22%F0%9F%8C%90%20Faraday%20HTTP%20Client%22%5D%20--%3E%20F%5B%22%F0%9F%93%A6%20Built-in%20Net%3A%3AHTTP%22%5D%0A%20%20%20%20F%20--%3E%20G%5B%22%F0%9F%9A%AB%20No%20External%20Libraries%22%5D%0A%20%20%20%20G%20--%3E%20H%5B%22%E2%9C%85%20Works%20Everywhere%22%5D%0A%20%20%20%20%0A%20%20%20%20style%20A%20fill%3A%23007bff%2Cstroke%3A%230056b3%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A%20%20%20%20style%20H%20fill%3A%2328a745%2Cstroke%3A%231e7e34%2Cstroke-width%3A2px%2Ccolor%3A%23ffffff%0A"})]),fallback:a(()=>s[4]||(s[4]=[e(" Loading... ")])),_:1})),s[13]||(s[13]=o(`<h2 id="test-structure" tabindex="-1">Test Structure <a class="header-anchor" href="#test-structure" aria-label="Permalink to &quot;Test Structure&quot;">​</a></h2><h3 id="directory-layout" tabindex="-1">Directory Layout <a class="header-anchor" href="#directory-layout" aria-label="Permalink to &quot;Directory Layout&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>test/</span></span>
<span class="line"><span>├── cyber_trackr_helper_test.rb  # Core gem functionality</span></span>
<span class="line"><span>├── live_api_validation_test.rb  # Live API integration  </span></span>
<span class="line"><span>├── test_helper.rb              # Shared test utilities</span></span>
<span class="line"><span>└── fixtures/                   # Test data and mocks</span></span></code></pre></div><h3 id="test-categories" tabindex="-1">Test Categories <a class="header-anchor" href="#test-categories" aria-label="Permalink to &quot;Test Categories&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>Test Type</strong></th><th><strong>Purpose</strong></th><th><strong>Speed</strong></th><th><strong>Dependencies</strong></th></tr></thead><tbody><tr><td><strong>Unit Tests</strong></td><td>Helper method validation</td><td>⚡ &lt; 1 second</td><td>Mock responses only</td></tr><tr><td><strong>Integration</strong></td><td>Live API behavior</td><td>🐌 ~30 seconds</td><td>cyber.trackr.live API</td></tr><tr><td><strong>Spectral</strong></td><td>OpenAPI validation</td><td>⚡ &lt; 1 second</td><td>Node.js + OpenAPI spec</td></tr></tbody></table><h2 id="writing-tests" tabindex="-1">Writing Tests <a class="header-anchor" href="#writing-tests" aria-label="Permalink to &quot;Writing Tests&quot;">​</a></h2><h3 id="unit-test-example" tabindex="-1">Unit Test Example <a class="header-anchor" href="#unit-test-example" aria-label="Permalink to &quot;Unit Test Example&quot;">​</a></h3><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HelperTest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Minitest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_list_stigs_filters_srgs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mock_documents_list  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Use test helpers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    stigs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = @client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">list_stigs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    assert_equal </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, stigs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    refute stigs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">key?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:Application_Security_Requirements_Guide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="using-test-helpers" tabindex="-1">Using Test Helpers <a class="header-anchor" href="#using-test-helpers" aria-label="Permalink to &quot;Using Test Helpers&quot;">​</a></h3><p>Always use the test helpers from <code>test/test_helper.rb</code>:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Good - uses proper mock structure</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mock_documents_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sample_document_list)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Bad - incomplete mock missing required fields</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stub_request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to_return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">body:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to_json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="ci-cd-testing" tabindex="-1">CI/CD Testing <a class="header-anchor" href="#ci-cd-testing" aria-label="Permalink to &quot;CI/CD Testing&quot;">​</a></h2><p>Our CI/CD pipeline tests across multiple platforms:</p><ul><li><strong>Platforms</strong>: Ubuntu, Windows, macOS</li><li><strong>Ruby Versions</strong>: 3.2, 3.3, 3.4</li><li><strong>Test Types</strong>: Unit tests, live API integration, OpenAPI validation</li></ul><h3 id="platform-specific-notes" tabindex="-1">Platform-Specific Notes <a class="header-anchor" href="#platform-specific-notes" aria-label="Permalink to &quot;Platform-Specific Notes&quot;">​</a></h3><p><strong>Windows Compatibility</strong>:</p><ul><li>Uses Faraday (pure Ruby) instead of typhoeus (requires libcurl.dll)</li><li>No external dependencies required</li><li>All tests pass on Windows GitHub Actions runners</li></ul><h2 id="coverage" tabindex="-1">Coverage <a class="header-anchor" href="#coverage" aria-label="Permalink to &quot;Coverage&quot;">​</a></h2><p>Run tests with coverage reporting:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bundle</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Coverage report generated in coverage/index.html</span></span></code></pre></div><h2 id="integration-testing" tabindex="-1">Integration Testing <a class="header-anchor" href="#integration-testing" aria-label="Permalink to &quot;Integration Testing&quot;">​</a></h2><h3 id="live-api-tests" tabindex="-1">Live API Tests <a class="header-anchor" href="#live-api-tests" aria-label="Permalink to &quot;Live API Tests&quot;">​</a></h3><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test against live cyber.trackr.live API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bundle </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rake </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stage2b</span></span></code></pre></div><p><strong>Note</strong>: Live API tests may skip some endpoints due to:</p><ul><li>JSON control character issues in responses</li><li>Rate limiting</li><li>Network timeouts</li></ul><p>These skips are expected and don&#39;t indicate test failures.</p><h2 id="debugging-tests" tabindex="-1">Debugging Tests <a class="header-anchor" href="#debugging-tests" aria-label="Permalink to &quot;Debugging Tests&quot;">​</a></h2><h3 id="webmock-issues" tabindex="-1">WebMock Issues <a class="header-anchor" href="#webmock-issues" aria-label="Permalink to &quot;WebMock Issues&quot;">​</a></h3><p>If you see WebMock conflicts:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Disable WebMock for specific tests</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WebMock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allow_net_connect!</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ... run test</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WebMock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disable_net_connect!</span></span></code></pre></div><h3 id="test-data" tabindex="-1">Test Data <a class="header-anchor" href="#test-data" aria-label="Permalink to &quot;Test Data&quot;">​</a></h3><p>Test fixtures are stored as Ruby hashes in test files rather than separate fixture files for simplicity.</p><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li><strong>Mock API responses</strong> for unit tests</li><li><strong>Use live API sparingly</strong> for integration tests</li><li><strong>Handle expected failures</strong> gracefully (JSON parsing issues)</li><li><strong>Test error conditions</strong> not just success cases</li><li><strong>Keep tests fast</strong> - use mocks for core functionality tests</li></ol>`,34))])}const b=h(c,[["render",g]]);export{C as __pageData,b as default};

import{_ as t,c as o,o as n,at as i}from"./chunks/framework.BV4VMCSO.js";const p=JSON.parse('{"title":"Known Issues and Solutions","description":"Documented issues, workarounds, and solutions for the cyber-trackr-live project","frontmatter":{"title":"Known Issues and Solutions","description":"Documented issues, workarounds, and solutions for the cyber-trackr-live project","layout":"doc","sidebar":true},"headers":[],"relativePath":"project/known-issues.md","filePath":"project/known-issues.md"}'),s={name:"project/known-issues.md"};function r(a,e,l,d,c,u){return n(),o("div",null,e[0]||(e[0]=[i('<h1 id="known-issues-and-solutions" tabindex="-1">Known Issues and Solutions <a class="header-anchor" href="#known-issues-and-solutions" aria-label="Permalink to &quot;Known Issues and Solutions&quot;">​</a></h1><h2 id="✅-resolved-text-html-content-type-with-json-body" tabindex="-1">✅ RESOLVED: text/html Content-Type with JSON Body <a class="header-anchor" href="#✅-resolved-text-html-content-type-with-json-body" aria-label="Permalink to &quot;✅ RESOLVED: text/html Content-Type with JSON Body&quot;">​</a></h2><p><strong>Status</strong>: <strong>FIXED</strong> as of July 2024 - The API maintainer has fixed the server configuration.</p><p><strong>Previous Problem</strong>: Some endpoints returned <code>Content-Type: text/html</code> for JSON responses.</p><p><strong>Resolution</strong>: The API now correctly returns <code>Content-Type: application/json</code> for all JSON endpoints. Our custom workarounds and patches have been removed.</p><h2 id="issue-1-optional-vs-required-fields" tabindex="-1">Issue 1: Optional vs Required Fields <a class="header-anchor" href="#issue-1-optional-vs-required-fields" aria-label="Permalink to &quot;Issue 1: Optional vs Required Fields&quot;">​</a></h2><p><strong>Problem</strong>: The generated client adds nil initialization for optional fields that don&#39;t need it.</p><p><strong>Solution</strong>: This is actually correct behavior. The OpenAPI spec properly defines:</p><ul><li>Required fields: <code>id</code>, <code>rule</code>, <code>severity</code>, <code>requirement-title</code>, <code>check-text</code>, <code>fix-text</code></li><li>Optional fields: All others</li><li>Nullable fields: Only <code>mitigation-statement</code></li></ul><p>The generator correctly handles this. No action needed.</p><h2 id="recommended-production-approach" tabindex="-1">Recommended Production Approach <a class="header-anchor" href="#recommended-production-approach" aria-label="Permalink to &quot;Recommended Production Approach&quot;">​</a></h2><ol><li>Use the stock OpenAPI-generated client - all server-side issues have been resolved</li><li>Document any remaining edge cases in the README</li><li>Add integration tests that verify the client works correctly with the live API</li><li>Consider creating a higher-level client wrapper for enhanced functionality (optional)</li></ol><p>The stock OpenAPI approach is now viable because:</p><ul><li>The API server has been fixed to return proper headers</li><li>No custom workarounds are needed</li><li>Standard OpenAPI tooling works correctly</li><li>The client is maintainable and follows OpenAPI best practices</li></ul><h2 id="testing-recommendations" tabindex="-1">Testing Recommendations <a class="header-anchor" href="#testing-recommendations" aria-label="Permalink to &quot;Testing Recommendations&quot;">​</a></h2><ol><li>Add tests that verify the client works correctly with the live API</li><li>Test both successful and error cases</li><li>Verify proper handling of the remaining known issues (date formats, error codes)</li><li>Include integration tests against the live API (with appropriate guards)</li></ol>',16)]))}const m=t(s,[["render",r]]);export{p as __pageData,m as default};

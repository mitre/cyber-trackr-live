import{_ as i,c as a,o as e,at as t}from"./chunks/framework.BV4VMCSO.js";const c=JSON.parse('{"title":"API Testing Guide","description":"","frontmatter":{},"headers":[],"relativePath":"development/api-testing.md","filePath":"development/api-testing.md"}'),n={name:"development/api-testing.md"};function l(h,s,p,r,k,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="api-testing-guide" tabindex="-1">API Testing Guide <a class="header-anchor" href="#api-testing-guide" aria-label="Permalink to &quot;API Testing Guide&quot;">​</a></h1><p>This guide documents the testing approach and lessons learned while validating the cyber.trackr.live OpenAPI specification.</p><h2 id="testing-strategy" tabindex="-1">Testing Strategy <a class="header-anchor" href="#testing-strategy" aria-label="Permalink to &quot;Testing Strategy&quot;">​</a></h2><p>We use three levels of testing to ensure our OpenAPI specification is accurate:</p><ol><li><strong>Syntax Validation</strong> - Ensure the spec is valid OpenAPI 3.1.1</li><li><strong>Completeness Checks</strong> - Verify all endpoints and schemas are documented</li><li><strong>Live Validation</strong> - Test against the real API to ensure accuracy</li></ol><h2 id="key-lessons-learned" tabindex="-1">Key Lessons Learned <a class="header-anchor" href="#key-lessons-learned" aria-label="Permalink to &quot;Key Lessons Learned&quot;">​</a></h2><h3 id="_1-faraday-url-construction" tabindex="-1">1. Faraday URL Construction <a class="header-anchor" href="#_1-faraday-url-construction" aria-label="Permalink to &quot;1. Faraday URL Construction&quot;">​</a></h3><p>When using Faraday with a base URL that includes a path (like <code>/api</code>), be careful with leading slashes:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># WRONG - This goes to https://cyber.trackr.live/ (ignores /api)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Faraday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://cyber.trackr.live/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Leading slash overwrites base path!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># CORRECT - Use full path</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Faraday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">url:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://cyber.trackr.live&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="_2-redirect-handling" tabindex="-1">2. Redirect Handling <a class="header-anchor" href="#_2-redirect-handling" aria-label="Permalink to &quot;2. Redirect Handling&quot;">​</a></h3><p>The API redirects from <code>/api/</code> to <code>/api</code> (trailing slash removed). Faraday needs proper middleware setup:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Faraday</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |f|</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Accept&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">response</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">content_type:</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;"> /</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">json$/</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Parse JSON first</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">response</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :follow_redirects</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # Then handle redirects</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p><strong>Important</strong>: The order matters! Put JSON parsing before redirect following.</p><h3 id="_3-json-parsing-after-redirects" tabindex="-1">3. JSON Parsing After Redirects <a class="header-anchor" href="#_3-json-parsing-after-redirects" aria-label="Permalink to &quot;3. JSON Parsing After Redirects&quot;">​</a></h3><p>When Faraday follows redirects, the JSON middleware might not automatically parse the response. Solution:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parse_response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is_a?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="_4-error-response-patterns" tabindex="-1">4. Error Response Patterns <a class="header-anchor" href="#_4-error-response-patterns" aria-label="Permalink to &quot;4. Error Response Patterns&quot;">​</a></h3><p>The API has specific error behaviors:</p><ul><li><strong>404</strong>: Invalid endpoints (e.g., <code>/api/invalid</code>)</li><li><strong>500</strong>: Invalid parameter formats (e.g., <code>V-INVALID</code>, <code>CCI-INVALID</code>)</li></ul><p>This is documented in our tests:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_parameter_validation</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Invalid V-ID returns 500, not 404</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = @client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/stig/.../V-INVALID&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assert_equal </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Invalid endpoint returns 404</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = @client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/invalid&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  assert_equal </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">404</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="running-tests" tabindex="-1">Running Tests <a class="header-anchor" href="#running-tests" aria-label="Permalink to &quot;Running Tests&quot;">​</a></h2><h3 id="quick-validation" tabindex="-1">Quick Validation <a class="header-anchor" href="#quick-validation" aria-label="Permalink to &quot;Quick Validation&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Just validate the OpenAPI spec syntax</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruby</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/openapi_validation_test.rb</span></span></code></pre></div><h3 id="full-test-suite" tabindex="-1">Full Test Suite <a class="header-anchor" href="#full-test-suite" aria-label="Permalink to &quot;Full Test Suite&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run all tests including live API validation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruby</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/openapi_validation_test.rb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruby</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/spec_completeness_test.rb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruby</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test/live_api_validation_test.rb</span></span></code></pre></div><h3 id="debugging-api-issues" tabindex="-1">Debugging API Issues <a class="header-anchor" href="#debugging-api-issues" aria-label="Permalink to &quot;Debugging API Issues&quot;">​</a></h3><p>If tests fail, enable request logging:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In test/live_api_validation_test.rb, uncomment:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">response</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :logger</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Log requests for debugging</span></span></code></pre></div><h3 id="testing-with-curl" tabindex="-1">Testing with curl <a class="header-anchor" href="#testing-with-curl" aria-label="Permalink to &quot;Testing with curl&quot;">​</a></h3><p>Always test endpoints with curl first to understand the actual behavior:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test JSON response</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Accept: application/json&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://cyber.trackr.live/api&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Check headers</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Accept: application/json&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://cyber.trackr.live/api/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Test specific endpoint</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://cyber.trackr.live/api/stig/Juniper_SRX_Services_Gateway_ALG/3/3&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jq</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><h2 id="test-file-descriptions" tabindex="-1">Test File Descriptions <a class="header-anchor" href="#test-file-descriptions" aria-label="Permalink to &quot;Test File Descriptions&quot;">​</a></h2><h3 id="openapi-validation-test-rb" tabindex="-1"><code>openapi_validation_test.rb</code> <a class="header-anchor" href="#openapi-validation-test-rb" aria-label="Permalink to &quot;\`openapi_validation_test.rb\`&quot;">​</a></h3><ul><li>Uses <code>openapi3_parser</code> gem for validation</li><li>Checks OpenAPI 3.1.1 compliance</li><li>Validates nullable syntax (<code>anyOf</code> with <code>type: &quot;null&quot;</code>)</li><li>Ensures all schema references resolve</li></ul><h3 id="spec-completeness-test-rb" tabindex="-1"><code>spec_completeness_test.rb</code> <a class="header-anchor" href="#spec-completeness-test-rb" aria-label="Permalink to &quot;\`spec_completeness_test.rb\`&quot;">​</a></h3><ul><li>Verifies all required endpoints exist</li><li>Checks schema completeness</li><li>Validates parameter patterns are consistent</li><li>Ensures examples match their patterns</li></ul><h3 id="live-api-validation-test-rb" tabindex="-1"><code>live_api_validation_test.rb</code> <a class="header-anchor" href="#live-api-validation-test-rb" aria-label="Permalink to &quot;\`live_api_validation_test.rb\`&quot;">​</a></h3><ul><li>Tests against real cyber.trackr.live API</li><li>Validates response structures</li><li>Samples actual data</li><li>Verifies error handling</li></ul><h2 id="common-issues-and-solutions" tabindex="-1">Common Issues and Solutions <a class="header-anchor" href="#common-issues-and-solutions" aria-label="Permalink to &quot;Common Issues and Solutions&quot;">​</a></h2><h3 id="issue-getting-html-instead-of-json" tabindex="-1">Issue: Getting HTML instead of JSON <a class="header-anchor" href="#issue-getting-html-instead-of-json" aria-label="Permalink to &quot;Issue: Getting HTML instead of JSON&quot;">​</a></h3><p><strong>Symptom</strong>: <code>JSON::ParserError: unexpected character: &#39;&lt;!DOCTYPE&#39;</code></p><p><strong>Causes</strong>:</p><ol><li>Missing <code>Accept: application/json</code> header</li><li>Incorrect URL path construction</li><li>Not following redirects</li></ol><p><strong>Solution</strong>: Check all three items above.</p><h3 id="issue-parameter-validation-returns-unexpected-status" tabindex="-1">Issue: Parameter validation returns unexpected status <a class="header-anchor" href="#issue-parameter-validation-returns-unexpected-status" aria-label="Permalink to &quot;Issue: Parameter validation returns unexpected status&quot;">​</a></h3><p><strong>Symptom</strong>: Expected 404 but got 500</p><p><strong>Solution</strong>: The API returns 500 for invalid parameter formats. Update tests and documentation to reflect actual behavior.</p><h3 id="issue-tests-pass-individually-but-fail-together" tabindex="-1">Issue: Tests pass individually but fail together <a class="header-anchor" href="#issue-tests-pass-individually-but-fail-together" aria-label="Permalink to &quot;Issue: Tests pass individually but fail together&quot;">​</a></h3><p><strong>Symptom</strong>: Warnings appear in wrong tests</p><p><strong>Solution</strong>: Tests run in random order. Use clear test names in output:</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">puts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">#{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__method__</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">] Test output here&quot;</span></span></code></pre></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li><strong>Always test with curl first</strong> - Understand actual API behavior</li><li><strong>Check both with and without trailing slashes</strong> - APIs may redirect</li><li><strong>Test error cases</strong> - Invalid parameters reveal API patterns</li><li><strong>Use proper assertions</strong> - Don&#39;t just print, assert expected behavior</li><li><strong>Document actual behavior</strong> - Even if it&#39;s not ideal (like 500 for invalid params)</li></ol><h2 id="continuous-validation" tabindex="-1">Continuous Validation <a class="header-anchor" href="#continuous-validation" aria-label="Permalink to &quot;Continuous Validation&quot;">​</a></h2><p>To ensure the spec stays accurate:</p><ol><li>Run tests before any spec changes</li><li>Update tests when discovering new API behaviors</li><li>Document any quirks or unexpected behaviors</li><li>Keep example data up-to-date</li></ol>`,57)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};

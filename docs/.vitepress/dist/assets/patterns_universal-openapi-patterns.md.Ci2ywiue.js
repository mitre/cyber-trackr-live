import{_ as i,C as r,c as l,o as a,at as t,b as o,w as s,a as p,G as c,au as h}from"./chunks/framework.BV4VMCSO.js";const A=JSON.parse('{"title":"Universal OpenAPI Project Patterns","description":"","frontmatter":{},"headers":[],"relativePath":"patterns/universal-openapi-patterns.md","filePath":"patterns/universal-openapi-patterns.md"}'),g={name:"patterns/universal-openapi-patterns.md"};function d(u,e,k,m,y,b){const n=r("Mermaid");return a(),l("div",null,[e[1]||(e[1]=t('<h1 id="universal-openapi-project-patterns" tabindex="-1">Universal OpenAPI Project Patterns <a class="header-anchor" href="#universal-openapi-project-patterns" aria-label="Permalink to &quot;Universal OpenAPI Project Patterns&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The cyber.trackr.live project demonstrates <strong>proven patterns that work for ANY OpenAPI project</strong>, from simple APIs to complex enterprise systems. These patterns solve common challenges in OpenAPI-driven development.</p><h2 id="core-patterns" tabindex="-1">Core Patterns <a class="header-anchor" href="#core-patterns" aria-label="Permalink to &quot;Core Patterns&quot;">​</a></h2>',4)),(a(),o(h,null,{default:s(()=>[c(n,{id:"mermaid-12",class:"mermaid",graph:"mindmap%0A%20%20root((Universal%20OpenAPI%20Patterns))%0A%20%20%20%20Testing%0A%20%20%20%20%20%20Two-Tier%20Architecture%0A%20%20%20%20%20%20Spec%20Validation%0A%20%20%20%20%20%20Behavior%20Testing%0A%20%20%20%20%20%20Cross-Platform%20CI%2FCD%0A%20%20%20%20Documentation%20%20%0A%20%20%20%20%20%20CORS-Free%20Deployment%0A%20%20%20%20%20%20Interactive%20Try-It-Out%0A%20%20%20%20%20%20Static%20Site%20Hosting%0A%20%20%20%20%20%20Multi-Language%20Examples%0A%20%20%20%20Development%0A%20%20%20%20%20%20OpenAPI-First%20Design%0A%20%20%20%20%20%20Version%20Synchronization%0A%20%20%20%20%20%20Multi-Language%20Clients%0A%20%20%20%20%20%20Automated%20Generation%0A%20%20%20%20Deployment%0A%20%20%20%20%20%20GitHub%20Pages%20Ready%0A%20%20%20%20%20%20No%20Server%20Required%0A%20%20%20%20%20%20CDN%20Distribution%0A%20%20%20%20%20%20Global%20Scalability%0A"})]),fallback:s(()=>e[0]||(e[0]=[p(" Loading... ")])),_:1})),e[2]||(e[2]=t(`<h3 id="_1-two-tier-testing-architecture" tabindex="-1">1. <strong>Two-Tier Testing Architecture</strong> <a class="header-anchor" href="#_1-two-tier-testing-architecture" aria-label="Permalink to &quot;1. **Two-Tier Testing Architecture**&quot;">​</a></h3><p><strong>Problem</strong>: Chicken-and-egg dependency between spec validation and client testing</p><p><strong>Solution</strong>: Separate static validation from behavioral testing</p><ul><li><strong>Tier 1</strong>: Spectral validates OpenAPI specification (Node.js)</li><li><strong>Tier 2</strong>: Generated clients test live API behavior (Ruby/Python/TypeScript)</li></ul><p><strong>Benefit</strong>: Works for any language stack, eliminates circular dependencies</p><h3 id="_2-openapi-first-version-management" tabindex="-1">2. <strong>OpenAPI-First Version Management</strong> <a class="header-anchor" href="#_2-openapi-first-version-management" aria-label="Permalink to &quot;2. **OpenAPI-First Version Management**&quot;">​</a></h3><p><strong>Problem</strong>: Keeping spec version in sync with client libraries and documentation</p><p><strong>Solution</strong>: Single source of truth in <code>openapi.yaml</code></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># openapi/openapi.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.2.3&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Single source of truth</span></span></code></pre></div><p><strong>Automation</strong>: Version propagates to:</p><ul><li>Generated clients (<code>gemspec</code>, <code>package.json</code>)</li><li>Documentation sites</li><li>Git tags</li><li>Release artifacts</li></ul><h3 id="_3-cors-free-documentation-deployment" tabindex="-1">3. <strong>CORS-Free Documentation Deployment</strong> <a class="header-anchor" href="#_3-cors-free-documentation-deployment" aria-label="Permalink to &quot;3. **CORS-Free Documentation Deployment**&quot;">​</a></h3><p><strong>Problem</strong>: Static site hosting can&#39;t proxy API calls (CORS blocks try-it-out features)</p><p><strong>Solution</strong>: Global fetch interceptor with external proxy</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Transparent CORS handling for GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isExternalAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> proxyFetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://proxy.scalar.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> originalFetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, init)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Benefit</strong>: Interactive API docs work on any static hosting platform</p><h3 id="_4-multi-language-client-generation" tabindex="-1">4. <strong>Multi-Language Client Generation</strong> <a class="header-anchor" href="#_4-multi-language-client-generation" aria-label="Permalink to &quot;4. **Multi-Language Client Generation**&quot;">​</a></h3><p><strong>Pattern</strong>: One OpenAPI spec → Multiple client libraries</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Ruby client</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openapi-generator-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruby</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --library=faraday</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># TypeScript client  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openapi-generator-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript-fetch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python client</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openapi-generator-cli</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> generate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --library=requests</span></span></code></pre></div><p><strong>Coordination</strong>: All clients share same version from OpenAPI spec</p><h3 id="_5-documentation-architecture" tabindex="-1">5. <strong>Documentation Architecture</strong> <a class="header-anchor" href="#_5-documentation-architecture" aria-label="Permalink to &quot;5. **Documentation Architecture**&quot;">​</a></h3><p><strong>Structure</strong>: Separate concerns by audience</p><ul><li><strong>API Reference</strong>: Interactive docs for API consumers</li><li><strong>Client Libraries</strong>: Language-specific usage guides</li><li><strong>Development</strong>: Implementation and architecture docs</li><li><strong>Patterns</strong>: Reusable approaches for other projects</li></ul><h2 id="real-world-implementation" tabindex="-1">Real-World Implementation <a class="header-anchor" href="#real-world-implementation" aria-label="Permalink to &quot;Real-World Implementation&quot;">​</a></h2><h3 id="project-structure-template" tabindex="-1">Project Structure Template <a class="header-anchor" href="#project-structure-template" aria-label="Permalink to &quot;Project Structure Template&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>project-name/</span></span>
<span class="line"><span>├── openapi/</span></span>
<span class="line"><span>│   └── openapi.yaml              # Single source of truth</span></span>
<span class="line"><span>├── clients/</span></span>
<span class="line"><span>│   ├── ruby/                     # Generated Ruby client</span></span>
<span class="line"><span>│   ├── typescript/               # Generated TypeScript client  </span></span>
<span class="line"><span>│   └── python/                   # Generated Python client</span></span>
<span class="line"><span>├── docs/</span></span>
<span class="line"><span>│   ├── api/                      # Interactive API reference</span></span>
<span class="line"><span>│   ├── clients/                  # Client library guides</span></span>
<span class="line"><span>│   ├── development/              # Architecture docs</span></span>
<span class="line"><span>│   └── patterns/                 # This document!</span></span>
<span class="line"><span>├── scripts/</span></span>
<span class="line"><span>│   ├── generate-clients.sh       # Multi-language generation</span></span>
<span class="line"><span>│   └── sync-versions.sh          # Version consistency</span></span>
<span class="line"><span>└── tests/</span></span>
<span class="line"><span>    ├── spec-validation/          # Spectral tests</span></span>
<span class="line"><span>    └── integration/              # Live API tests</span></span></code></pre></div><h3 id="release-process-template" tabindex="-1">Release Process Template <a class="header-anchor" href="#release-process-template" aria-label="Permalink to &quot;Release Process Template&quot;">​</a></h3><ol><li><strong>Update version</strong> in <code>openapi.yaml</code></li><li><strong>Generate clients</strong> for all target languages</li><li><strong>Run two-tier tests</strong> (spec + integration)</li><li><strong>Build documentation</strong> with interactive features</li><li><strong>Release coordinated</strong> across all artifacts</li></ol><h2 id="why-this-matters" tabindex="-1">Why This Matters <a class="header-anchor" href="#why-this-matters" aria-label="Permalink to &quot;Why This Matters&quot;">​</a></h2><h3 id="for-enterprise-apis" tabindex="-1">For Enterprise APIs <a class="header-anchor" href="#for-enterprise-apis" aria-label="Permalink to &quot;For Enterprise APIs&quot;">​</a></h3><ul><li><strong>Consistency</strong>: Same patterns across all API projects</li><li><strong>Governance</strong>: Centralized specification management</li><li><strong>Quality</strong>: Automated validation and testing</li><li><strong>Documentation</strong>: Self-service for API consumers</li></ul><h3 id="for-open-source-projects" tabindex="-1">For Open Source Projects <a class="header-anchor" href="#for-open-source-projects" aria-label="Permalink to &quot;For Open Source Projects&quot;">​</a></h3><ul><li><strong>Accessibility</strong>: Works with free hosting (GitHub Pages)</li><li><strong>Multi-language</strong>: Supports diverse contributor base</li><li><strong>Maintainability</strong>: Clear separation of concerns</li><li><strong>Scalability</strong>: Patterns grow with project complexity</li></ul><h3 id="for-individual-developers" tabindex="-1">For Individual Developers <a class="header-anchor" href="#for-individual-developers" aria-label="Permalink to &quot;For Individual Developers&quot;">​</a></h3><ul><li><strong>Speed</strong>: Proven patterns eliminate trial-and-error</li><li><strong>Reliability</strong>: Battle-tested solutions</li><li><strong>Learning</strong>: Understanding transfers between projects</li><li><strong>Future-proofing</strong>: Patterns adapt to new requirements</li></ul><h2 id="adoption-guide" tabindex="-1">Adoption Guide <a class="header-anchor" href="#adoption-guide" aria-label="Permalink to &quot;Adoption Guide&quot;">​</a></h2><h3 id="quick-start-any-project" tabindex="-1">Quick Start (Any Project) <a class="header-anchor" href="#quick-start-any-project" aria-label="Permalink to &quot;Quick Start (Any Project)&quot;">​</a></h3><ol><li><strong>Structure your OpenAPI spec</strong> as single source of truth</li><li><strong>Implement two-tier testing</strong> (Spectral + your language)</li><li><strong>Set up interactive documentation</strong> with CORS proxy</li><li><strong>Automate client generation</strong> for your target languages</li></ol><h3 id="advanced-implementation" tabindex="-1">Advanced Implementation <a class="header-anchor" href="#advanced-implementation" aria-label="Permalink to &quot;Advanced Implementation&quot;">​</a></h3><ol><li><strong>Version management automation</strong> across all artifacts</li><li><strong>Multi-language client libraries</strong> with coordinated releases</li><li><strong>Enterprise-grade documentation</strong> with examples and guides</li><li><strong>Comprehensive testing strategy</strong> covering spec and behavior</li></ol><h2 id="key-insight" tabindex="-1">Key Insight <a class="header-anchor" href="#key-insight" aria-label="Permalink to &quot;Key Insight&quot;">​</a></h2><p><strong>These patterns solve universal problems in OpenAPI development:</strong></p><ul><li>Dependency management</li><li>Version synchronization</li><li>Cross-platform compatibility</li><li>Documentation deployment</li><li>Multi-language support</li></ul><p><strong>The cyber.trackr.live implementation proves these patterns work at scale</strong> with:</p><ul><li>15+ OpenAPI endpoints</li><li>Windows/macOS/Linux compatibility</li><li>Ruby client generation</li><li>Interactive documentation</li><li>Automated testing pipeline</li></ul><h2 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h2><ol><li><strong>Study this project</strong>: See patterns in action</li><li><strong>Copy the structure</strong>: Adapt to your needs</li><li><strong>Implement incrementally</strong>: Start with two-tier testing</li><li><strong>Scale up</strong>: Add multi-language support as needed</li></ol><p><strong>Result</strong>: Robust, maintainable OpenAPI projects that scale from prototype to enterprise.</p>`,48))])}const P=i(g,[["render",d]]);export{A as __pageData,P as default};
